import { Telegraf, Markup, Scenes, session, Context } from 'telegraf';
import 'dotenv/config';
import { format, parse } from 'date-fns';

// =============================================================================
// 1. –¢–ò–ü–´
// =============================================================================

type Room = { id: number; name: string; capacity: number };
type Booking = { id: number; title: string; startTime: string };

// =============================================================================
// 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// =============================================================================

async function getUserIdByTelegramId(telegramId: number): Promise<number | null> {
    const apiUrl = process.env.API_BASE_URL;
    if (!apiUrl) {
        console.error("API_BASE_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!");
        return null;
    }
    try {
        const response = await fetch(`${apiUrl}/users/by-telegram/${telegramId}`);
        if (!response.ok) return null;
        const userData = await response.json();
        return userData.id;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        return null;
    }
}

// =============================================================================
// 3. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¶–ï–ù–´
// =============================================================================

const bookingWizard = new Scenes.WizardScene<any>(
  'booking_wizard',

  // –®–∞–≥ 1: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
  async (ctx) => {
    await ctx.reply(
      `–í—ã –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ –∫–æ–º–Ω–∞—Ç—É "${ctx.scene.session.roomName}".\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, ${format(new Date(), 'yyyy-MM-dd')}).\n\n` +
      `–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel.`
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
  async (ctx) => {
    if ('text' in ctx.message && /^\d{4}-\d{2}-\d{2}$/.test(ctx.message.text)) {
      ctx.scene.session.date = ctx.message.text;
      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00).');
      return ctx.wizard.next();
    }
    await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –ì–ì–ì–ì-–ú–ú-–î–î.');
    return;
  },

  // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
  async (ctx) => {
    if ('text' in ctx.message && /^\d{2}:\d{2}$/.test(ctx.message.text)) {
      ctx.scene.session.time = ctx.message.text;
      await ctx.reply('–ü—Ä–∏–Ω—è—Ç–æ. –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏.');
      return ctx.wizard.next();
    }
    await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú.');
    return;
  },

  // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å
  async (ctx) => {
    if (!('text' in ctx.message) || !ctx.message.text) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏.');
      return;
    }
    ctx.scene.session.title = ctx.message.text;
    await ctx.reply('–ú–∏–Ω—É—Ç–∫—É, —Å–æ–∑–¥–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');

    const { roomId, date, time, title, roomName } = ctx.scene.session;
    const userId = await getUserIdByTelegramId(ctx.from.id);

    if (!userId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å–∞–π—Ç–µ.');
      return ctx.scene.leave();
    }

    if (!roomId || !date || !time || !title || !roomName) {
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return ctx.scene.leave();
    }

    const startTime = parse(`${date} ${time}`, 'yyyy-MM-dd HH:mm', new Date());
    const endTime = new Date(startTime.getTime() + 60 * 60 * 1000);

    try {
      const response = await fetch(`${process.env.API_BASE_URL}/bookings`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, roomId, userId, startTime: startTime.toISOString(), endTime: endTime.toISOString() }),
      });
      const data = await response.json();
      if (!response.ok) throw new Error(data.error || '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.');
      await ctx.reply(`‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–º–Ω–∞—Ç–∞ "${roomName}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.`);
    } catch (error: any) {
      await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: ${error.message}`);
    }

    return ctx.scene.leave();
  }
);

bookingWizard.command('cancel', async (ctx) => {
  await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  return ctx.scene.leave();
});

// =============================================================================
// 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
// =============================================================================

const bot = new Telegraf<Context>(process.env.BOT_TOKEN!);
const stage = new Scenes.Stage<any>([bookingWizard]);

bot.use(session());
bot.use(stage.middleware());

// =============================================================================
// 5. –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
// =============================================================================

bot.start((ctx) => {
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–∫. ü§ñ\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/rooms - –ü–æ–∫–∞–∑–∞—Ç—å –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É\n' +
    '/mybookings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏\n' +
    '/link <code> - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å–∞–π—Ç–µ\n' +
    '/help - –ü–æ–º–æ—â—å'
  );
});

bot.help((ctx) => ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rooms, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –ï—Å–ª–∏ –≤—ã "–∑–∞—Å—Ç—Ä—è–ª–∏" –≤ –¥–∏–∞–ª–æ–≥–µ, –≤–≤–µ–¥–∏—Ç–µ /cancel.'));

bot.command('rooms', async (ctx) => {
  try {
    const response = await fetch(`${process.env.API_BASE_URL}/rooms`);
    if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç.');
    const rooms: Room[] = await response.json();

    if (rooms.length === 0) return ctx.reply('–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –ø–æ–∫–∞ –Ω–µ—Ç.');

    const buttons = rooms.map((room) =>
      Markup.button.callback(
        `${room.name} (–¥–æ ${room.capacity} —á–µ–ª.)`,
        `book_room_${room.id}_${room.name}`
      )
    );

    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:',
      Markup.inlineKeyboard(buttons, { columns: 1 })
    );
  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

bot.command('mybookings', async (ctx) => {
  const userId = await getUserIdByTelegramId(ctx.from.id);
  if (!userId) {
    return ctx.reply('–í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.');
  }

  try {
    const response = await fetch(`${process.env.API_BASE_URL}/bookings/user/${userId}`);
    if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
    const bookings: Booking[] = await response.json();

    if (bookings.length === 0) return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');

    const buttons = bookings.map((booking) =>
      Markup.button.callback(
        `‚ùå ${booking.title} (${format(new Date(booking.startTime), 'dd.MM HH:mm')})`,
        `delete_booking_${booking.id}`
      )
    );

    await ctx.reply(
      '–í–æ—Ç –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å:',
      Markup.inlineKeyboard(buttons, { columns: 1 })
    );

  } catch (error: any) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

bot.command('link', async (ctx) => {
  const code = ctx.payload.trim();
  const telegramId = ctx.from.id;

  if (!code) {
    return ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n' +
      '–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '/link –≤–∞—à_–∫–æ–¥'
    );
  }

  try {
    const response = await fetch(`${process.env.API_BASE_URL}/telegram/complete-link`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ code, telegramId }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.');
    }

    await ctx.reply(`‚úÖ ${data.message} –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.`);

  } catch (error: any) {
    ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: ${error.message}`);
  }
});

// =============================================================================
// 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ö–ù–û–ü–ö–ò (ACTIONS)
// =============================================================================

bot.action(/book_room_(\d+)_([\w\s\-.()]+)/, async (ctx: any) => {
  await ctx.answerCbQuery();
  ctx.scene.session.roomId = parseInt(ctx.match[1], 10);
  ctx.scene.session.roomName = ctx.match[2];
  ctx.scene.enter('booking_wizard');
});

bot.action(/delete_booking_(\d+)/, async (ctx: any) => {
  await ctx.answerCbQuery('–û—Ç–º–µ–Ω—è—é...');
  const bookingId = parseInt(ctx.match[1], 10);
  const userId = await getUserIdByTelegramId(ctx.from.id);

  if (!userId) {
    await ctx.editMessageText('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    return;
  }

  try {
    const response = await fetch(`${process.env.API_BASE_URL}/bookings/${bookingId}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId }),
    });

    if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å.');
    }

    await ctx.editMessageText(`‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
  } catch (error: any) {
    await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// =============================================================================
// 7. –ó–ê–ü–£–°–ö –ë–û–¢–ê
// =============================================================================
bot.launch(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));